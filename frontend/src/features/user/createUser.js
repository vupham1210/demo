import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';
import Swal from 'sweetalert2';

const userCreateAction = `${process.env.REACT_APP_SERVER_URL}/users/add`;

const initialState = {
  status: 'idle',
};

// Async Create user
export const createUserAsync = createAsyncThunk(
  'user/createUser',
  async (formData) => {
    var config = {
      method: 'post',
      url: userCreateAction,
      headers: { 
        'Content-Type': 'application/json'
      },
      data : JSON.stringify(formData)
    };
    const response = await axios(config).then((res) => {
      return res.data;
    }).catch(function (error) {
      console.log(error);
    });
    // The value we return becomes the `fulfilled` action payload
    Swal.fire(
      response.title,
      response.message,
      response.type
    ); 
    return response;
  }
);

export const createUserSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateUser: (state, action) => {
      if(action.payload != undefined){
        state.data = action.payload;
      }
    },
    userLoggout: (state) => {
      state.data = '';
      sessionStorage.clear();
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createUserAsync.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(createUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
      }) 
  }
});

export const userCreateStatus = (state) => state.createUser.status;

export default createUserSlice.reducer;
