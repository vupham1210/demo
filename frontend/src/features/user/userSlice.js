import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

const getUserInforAction = `${process.env.REACT_APP_SERVER_URL}/users/`;

const initialState = {
  data: '',
  status: 'idle',
};

// Async Update user
export const getUserInforAsync = createAsyncThunk(
  'getUserInfor',
  async (accesstoken) => {
    console.log(accesstoken);
    var config = {
      method: 'post',
      url: getUserInforAction,
      headers: { 
        'token': `bear ${accesstoken}`
      },
    };
    const response = await axios(config).then((res) => { return res.data; })
    console.log(response);
    return response;
  }
);

export const getUserInforSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUserInforAsync.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(getUserInforAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data = action.payload;
      }) 
  }
});

export const userInformation = (state) => state.user.data;
export const userInformationStatus = (state) => state.user.status;

export default getUserInforSlice.reducer;
