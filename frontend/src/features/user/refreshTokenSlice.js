import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

const getRefreshToken = `${process.env.REACT_APP_SERVER_URL}/users/refresh-token`;

const initialState = {
  data: '',
  status: 'idle',
};

// Renew Token
export const refreshTokenAsync = createAsyncThunk(
  'refreshtoken',
  async (refreshToken) => {
  var config = {
    method: 'post',
    url: getRefreshToken,
    headers: { 
      'Content-Type': 'application/json'
    },
    data : JSON.stringify({
      refreshtoken: refreshToken
    })
  };
  const response = await axios(config).then((res) => { return res.data; })
  return response;
})

export const refreshTokenSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateUser: (state, action) => {
      if(action.payload != undefined){
        state.data = action.payload;
      }
    },
    userLoggout: (state) => {
      state.data = '';
      sessionStorage.clear();
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(refreshTokenAsync.pending, (state) => {
        state.status = 'pending';
        console.log('refresh token')
      })
      .addCase(refreshTokenAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        if(action.payload){
          state.data = action.payload;
          sessionStorage.setItem('userAccount', JSON.stringify(action.payload))
        }
      });
  }
});

export const refreshTokenStatus = (state) => state.refreshtoken.status;
export const refreshTokenData = (state) => state.refreshtoken.data;

export default refreshTokenSlice.reducer;
