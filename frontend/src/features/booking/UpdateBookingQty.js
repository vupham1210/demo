import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { AxiosInstance } from '../Instance';

import Swal from 'sweetalert2';

const bookingUpdateAction = `${process.env.REACT_APP_SERVER_URL}/booking/update-booking`;

const initialState = {
  status: 'idle',
}

// Async Update user
export const updateBookingQtyAsync = createAsyncThunk(
  'updateBookingQty',
  async (props) => {
    const response = await AxiosInstance.post(`${bookingUpdateAction}/${props.id}`, props.dataTimePick).then((res) => {
      return res.data;
    }).catch(function (error) {
      console.log(error);
    });
    // The value we return becomes the `fulfilled` action payload
    Swal.fire(
      response.title,
      response.message,
      response.type
    ); 
    return response;
  }
);

export const updateBookingQtySlice = createSlice({
  name: 'updateBookingQty',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(updateBookingQtyAsync.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(updateBookingQtyAsync.fulfilled, (state, action) => {
        state.status = 'idle';
      }) 
  }
});


export const updateBookingQtyStatus = (state) => state.bookingUpdateQty.status;
export const updateBookingQtyData = (state) => state.bookingUpdateQty.data;
export default updateBookingQtySlice.reducer;
