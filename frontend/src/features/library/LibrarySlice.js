import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { AxiosInstance } from '../Instance';
import axios from 'axios';
import Swal from 'sweetalert2';

const LibraryURI = `${process.env.REACT_APP_SERVER_URL}/upload/images/`;
const UpLoadServerURI = process.env.REACT_APP_SERVER_URL + '/upload/';

const initialState = {
  status: 'idle',
  images: [],
  library: [],
};

// Async Create user
export const loadLibraryAsync = createAsyncThunk(
  'library/load',
  async () => {
    const response = await AxiosInstance.get(LibraryURI).then((res) => {
      return res.data;
    }).catch(function (error) {
      console.log(error);
    });
    if(response?. type === 'error'){
      Swal.fire(
        response.type,
        response.message,
        response.title,
      )
    }
    return response;
  }
);

export const librarySlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setImageSelected: (state, action) => {
      const payLoad = action.payload;
      const previousState = state.images;
      let newState = [];
      let added = false;
      
      if(previousState.length > 0){
        previousState.map((val, index) => {
            if(val._id != payLoad._id){
                newState.push(val);
            } else {
                added = index;
            }
        })
        if(added === false){
            newState.push(action.payload);
        } else {
            newState.splice(added, 1);
        }
        state.images = newState;
      } else {
        state.images = [payLoad];
      }
   },

   setSingleSelected: (state, action) => {
      let payLoad = action.payload;
      if(!payLoad){
        state.images = [];
      } else{
        state.images = [payLoad];
      }
     
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadLibraryAsync.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(loadLibraryAsync.fulfilled, (state, action) => {
        state.library = action.payload;
        state.status = 'idle';
      }) 
  }
});

export const { setImageSelected, setSingleSelected } = librarySlice.actions;
export const imagesSelected = (state) => state.library.images;
export const uploadLibraryStatus = (state) => state.library.status;
export const library = (state) => state.library.library;

export default librarySlice.reducer;
